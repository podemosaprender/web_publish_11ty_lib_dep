{% macro DBG(p,txt) %}
<!-- DBG:{{txt or ""}} {{ p | dump | safe }} -->
{% endmacro %}

{% macro NOP() %}
{% endmacro %}

{# CSS NEUTRAL ###################################################}
{% macro head_meta(p) %}
	<meta charset="utf-8">
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<meta name="google-site-verification" content="TODO" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>{{ title or p.title }}</title>
	<link rel="shortcut icon" href="{{ p.v_site_base_path }}images/favicon.ico">
	<meta name="description" content="{{ description or cfg.description }}">
	<meta content='{{ title or p.title }}' property='og:title'/>
	<meta content='{{ p.v_brand_name }}' property='og:author'/>
	<meta content='{{ p.v_agency_name }}' property='og:developer'/>
	<meta content='{{ title or cfg.title }}' name='facebook:title'/>
	<meta content='website' property='og:type'/>
	<meta content='TODO' property='facebook:author'/>
	<meta content='TODO' name='facebook:image'/>
	<meta content='{{ p.v_brand_name }}' property='og:site_name'/>
	<meta content='{{ description or p.description }}' property='facebook:description'/>
	<meta content='TODOsummary_large_image' name='twitter:card'/>
	<meta content='{{ p.v_contact_links.twitter }}' property='twitter:author'/>
	<meta content='{{ p.v_site_url }}' name='twitter:site'/>
	<meta content='TODO' name='twitter:image'/>
	<meta content='{{ description or p.description }}' name='twitter:description'/>
	<meta content='{{ title or p.title }} ' name='twitter:title'/>
	<meta content='{{ title or p.title }}' name='keywords'/>
	<meta content='index, follow' name='robots'/>
	<link rel="apple-touch-icon" href="TODO">
	<link rel="icon" type="image/x-icon" href="TODO" />
	<link rel="author" href="{{ p.v_agency_url }}" />
	<link rel="alternate" href="{{ TODO_feed_xml }}" type="application/atom+xml" title="{{ title or p.title }}">
	<link rel="alternate" href="{{ TODO_feed_json }}" type="application/json" title="{{ title or p.title }}">
{% endmacro %}

{% macro copyright_text(p) %}
	<script>{{ "document.write(new Date().getFullYear())" }}</script> © {{ p.v_brand_name }} by {{ p.v_agency_name }}
{% endmacro %}

{% macro alpinejs() %}
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
{% endmacro %}


{# CSS OUR STANDARD ##############################################}
{% macro ws_html(p) %}
	<section class="section" id="{{ p.id }}">
		<div class="container">
			<div class="row justify-content-center">
				<div class="col-lg-8">
					{{ p.html | safe }}
				</div>
			</div>
		</div>
	</section>
{% endmacro %}

{% macro ws_markdown(p) %}
	{%- set ghtml -%}{% markdown %}{{ p.markdown }}{% endmarkdown %}{%- endset -%}
	{%- set pmd= p | mix_kv({'type': 'html', 'html': ghtml}) -%}
	{{ DBG(pmd,'markdown 2 html') }}
	{{ ws_html(pmd) }}
{% endmacro %}

{% macro light_dark_mode(p) %}	
	<a href="javascript: void(0);" id="light-dark-mode" class="mode-btn text-white rounded-end">
		<i class="mdi mdi-sun-compass bx-spin mode-light"></i>
		<i class="mdi mdi-moon-waning-crescent mode-dark"></i>
	</a>
{% endmacro %}

{% macro status(p) %}	
	<div id="status"><div class="spinner"></div></div>
{% endmacro %}

{% macro preloader(p) %}	
	<div id="preloader">{{ status(p) }}</div>
{% endmacro %}

{% macro copyright_text(p) %}
	{{ DBG(p,"copyright_text") }}
	<script>{{ "document.write(new Date().getFullYear())" }}</script> © {{ p.v_brand_name }} by {{ p.v_agency_name }}
{% endmacro %}

{# SEARCH ###################################################}
{% macro collection_urls(colname) %}
{%- for e in collections[colname] %} {{e.page.outputPath}}={{e.page.url}}{% endfor -%}
{% endmacro %}

{% macro search_collection(colname) %}
<script src="/js/lunr.js"></script>
<h1>Results</h1>
<ul id="results">
	Searching...
</ul>
<script>
	const p = new URLSearchParams(location.search)
	const q = p.get('q')
	fetch('#O-O#SEARCH_IDX:col_{{colname}} {{collection_urls(colname)}}:').then( r => r.json() ).then( j => {
		var idx = Lunr.lunr.Index.load(j)
		var res= idx.search(q)
		let html= res.map( r => {
			let [url, title]= r.ref.split('\t',2)
			return `<li><a href="{{SiteBasePath}}${url}">${title}</a></li>` //A: template!
		}).join('\n');
		document.getElementById('results').innerHTML= html;
	})
</script>
{% endmacro %}

{# p5js #####################################################}
{% macro p5js(id) %}
	<script src="https://cdn.jsdelivr.net/npm/p5@1.9.4/lib/p5.js"></script>
	<canvas id="{{id}}_canvas"></canvas>
	<script>
		function p5js_{{id}}() {// multiple instances, const and let clashes friendly
			window.DBGp5 && console.log("p5js {{id}}");
			function sketch(p5) {
				window.DBGp5 && console.log("p5js {{id}} sketch");
				p5.createCanvasOri= p5.createCanvas;
				p5.createCanvas= (w,h,impl) => {window.DBGp5 && console.log("p5js {{id}} createCanvas"); p5.createCanvasOri(w,h,impl,document.getElementById('{{id}}_canvas'))};
				{{ caller() | safe }}
			}
			new p5(sketch);
		}
		p5js_{{id}}();
	</script>
{% endmacro %}

{# p5js emoji ###############################################}
{# SEE: https://erraticgenerator.com/blog/p5js-texttopoints-function/ #}
{# SEE: 4th param=use existing canvas https://p5js.org/reference/#/p5/createCanvas #}
{# SEE: accessibility https://p5js.org/reference/#/p5/describe #}
{% macro p5js_emoji(text,emoji_list) %}
	{% call p5js() %}
		let font, points, emoji, e;

		p5.preload= function preload() {
			font = p5.loadFont('{{ SiteBasePath }}/l1b_/any/fonts/parisienne-regular.ttf'); //U: must be a ttf file
		}

		p5.setup= function setup() {
			p5.createCanvas(p5.windowWidth*.5, p5.windowWidth*.12);
			emoji = ['🌍','🌎','🌏'];
		}

		p5.draw= function draw() {
			p5.frameRate(5);
			if (!window.stop_animation) {
				points1 = font.textToPoints({{ text | dump | safe }},0,0,p5.height*.6, {
					sampleFactor: .09,
					simplifyThreshold: 0
				});
				let xmin=p5.width, xmax=0; points1.forEach(p => {xmin=Math.min(xmin,p.x);xmax=Math.max(xmax,p.x);});
				let xofs= (p5.width-(xmax-xmin))/2;
				//XXX:sepuede calcular una sola vez?
				//DBG: console.log("POINTS",{xofs,xmin,xmax,width,height,points1})
				p5.background(85,100,100);
				p5.textSize(p5.height/15);
				p5.beginShape(); // make a shape out of the points of the font
				for (let i = 0; i < points1.length; i++) {
					const p1 = points1[i]
					pickEmoji();
					p5.text(emoji[e], p1.x+xofs, p1.y+p5.height/2);
				}
				p5.endShape();
			}
		}

		function pickEmoji() {
			e = Math.floor(p5.random(emoji.length));
		}

		p5.windowResized= function windowResized() {
			p5.resizeCanvas(p5.windowWidth, p5.windowHeight);
		}
	{% endcall %}
{% endmacro %}


{# RENDER for CONFIG + WIDGETS ###############################}
{% set twme_lib={
	'head_meta_': head_meta,
	'html': ws_html,
	'markdown': ws_markdown,
	'light_dark_mode_': light_dark_mode,
	'preloader_': preloader,
	'head_z_': NOP,
	'body_z_': NOP,
'':''} %}

{% macro render_one(tw,k,data) %}
	{%- if tw[k] -%}{{ tw[k](data) }}
	{%- else -%}<div style="background: red; color: yellow;">ERROR: MISSING {{k}} FROM YOUR WIDGET TOOLKIT<pre>{{ data | dump | safe}}</pre></div>{%-endif-%}
{% endmacro %}

{% macro render(p,content,widget_overrides,widget_overrides1) %}{%- set tw= {'TW':'lib'} | mix_kv(twme_lib,widget_overrides1,widget_overrides) -%}
{%- set p= p or {} -%}{%- set_k p,"sections",p.sections or {} -%}
{%- set_k p, 'labels', {} | mix_kv(p.defaults['labels_'+p.lang],p.labels) -%}
<!-- IMAGES: {%- for fname,d in p.images_gen -%}{%- p5gen d | mix_kv({'fname': fname}) -%}{%- endfor -%} -->
{%- if content -%}
{%- set_k p.sections,"content",{'type': 'html', 'html': content} -%}
{%- endif -%}
{%- set title= title or p.site.v_brand_name or "XXX:title" -%}
<!DOCTYPE html>
<html lang="{{ lang or p.site.lang or 'es' }}">
	<head>
	<!-- DBG:LIB page_theme="{{ page_theme}}" {{ tw | keys }} widget_overrides1 {{ widget_overrides1 | keys }}-->
		{{ render_one(tw,'head_meta_',p) }}
		{{ tw.head_z_(p,tw) }}
	</head>
	<body>
	  {% if not p.no_dark_switch %}{{ render_one(tw,'light_dark_mode_',p) }}{% endif %}
		{% if p.use_preloader %}{{ render_one(tw,'preloader_',p) }}{% endif %}

		{% set navbar_data= {} | mix_kv(p.labels, p.site, p.navbar,{'navitems':{} }) %}
		{% for id, data in p.sections %}
			{% set_k navbar_data.navitems,'#'+id, id %}
		{% endfor %}
		{{ DBG(navbar_data,"NAVBAR") }}
		{{ render_one(tw,'navbar_',navbar_data) }}

		{%for id, data in p.sections %}
			{% if data %}
				{{ DBG(data,"SECTION "+id+" "+data.type) }}
				{% set data_full= data | mix_kv (p.labels, p.site, data, {'id': id }) %}
				{{ render_one(tw,data.type,data_full) }}
			{% endif %}
		{% endfor %}

		{% set footer_data= {} %}{# XXX:inventar una forma mejor de merge #}
		{% mix_kv footer_data, p.labels, p.site, p.footer %}
		{{ DBG(footer_data, "FOOTER") }}
		{{ render_one(tw,'footer_',footer_data) }}

		<!-- XXX:modals van aca -->

		{{ render_one(tw,'body_z_',p) }}
	</body>
</html>
{% endmacro %}
